package main

import (
	"bytes"
	"text/template"
)

func renderTemplate(textTemplate string, data any) string {
	tmpl, err := template.New("Template").Parse(textTemplate)
	if err != nil {
		panic(err)
	}
	var out bytes.Buffer
	err = tmpl.Execute(&out, data)
	if err != nil {
		panic(err)
	}

	return out.String()
}

var functionTemplate = `
func {{.Name}}({{.Params}}) itertools.Iterator[int] {
	{{range $name, $typ := .VarDecls}}
	var {{$name}} {{$typ}}
	{{end}}
	__next := 0
	var __zero int
	__nop := func() {}
	advance := func() (bool, int) {
		switch __next {
		{{range .NextIndices}}
		case {{.}}:
			goto __next_{{.}}
		{{end}}
		}
		
	__next_0:

		{{.Body}}

		return false, __zero
	}
	return itertools.FromAdvance(advance)
}
`

func renderFunction(name, params, body string, stateCount int, variableDeclarations map[string]string) string {
	nextIndices := make([]int, stateCount+1)
	for i := range nextIndices {
		nextIndices[i] = i
	}

	return renderTemplate(functionTemplate, struct {
		Name, Params, Body string
		NextIndices        []int
		VarDecls           map[string]string
	}{Name: name, Params: params, Body: body, NextIndices: nextIndices, VarDecls: variableDeclarations})
}

var returnTemplate = `
	__next = {{.StateId}}
	return true, {{.ReturnValue}}
__next_{{.StateId}}:
	__nop()
`

func renderReturn(stateId int, returnValue string) string {
	return renderTemplate(returnTemplate, struct {
		StateId     int
		ReturnValue string
	}{StateId: stateId, ReturnValue: returnValue})
}

var packageTemplate = `
package {{.Name}}

// AUTOGENERATED DO NOT MODIFY!!!

{{.Content}}
`

func renderPackage(name, content string) string {
	return renderTemplate(packageTemplate, struct{ Name, Content string }{Name: name, Content: content})
}

var ifTemplate = `
	if {{.Cond}} {
		goto {{.ThenLabel}}
	} else {
		goto {{.ElseLabel}}
	}
{{.ThenLabel}}:
	{{.ThenBody}}
	goto {{.PostLabel}}
{{.ElseLabel}}:
	{{.ElseBody}}
	goto {{.PostLabel}}
{{.PostLabel}}:
	__nop()
`

func renderIf(cond, thenLabel, thenBody, elseLabel, elseBody, postLabel string) string {
	return renderTemplate(ifTemplate, struct{ Cond, ThenLabel, ThenBody, ElseLabel, ElseBody, PostLabel string }{
		cond, thenLabel, thenBody, elseLabel, elseBody, postLabel,
	})
}

var foreverTemplate = `
{{.HeadLabel}}:
	{{.Body}}
	goto {{.HeadLabel}}
`

func renderForever(headLabel, body string) string {
	return renderTemplate(foreverTemplate, struct{ HeadLabel, Body string }{headLabel, body})
}
